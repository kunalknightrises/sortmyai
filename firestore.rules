rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true;  // Allow public read access to user profiles
      allow write: if isOwner(userId); // Only owner can write/update their user doc
      allow list: if true;

      // Nested collections under users
      match /{allChildren=**} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
    }

    // Portfolio items collection
    match /portfolio/{itemId} {
      allow read: if true;
      allow create: if isAuthenticated();
      // Allow any authenticated user to update only the likes_count, views_count, or comments_count fields
      allow update: if isAuthenticated() && (
        resource.data.user_id == request.auth.uid ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes_count', 'views_count', 'comments_count', 'likes', 'views', 'comments'])
      );
      allow delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;

      match /interactions/{type} {
        allow read: if true;
        allow write: if isAuthenticated();
      }

      match /likes/{likeId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid && request.resource.data.keys().hasOnly(['userId', 'postId', 'createdAt']);
        allow delete: if isAuthenticated() && get(/databases/$(database)/documents/portfolio/$(itemId)/likes/$(likeId)).data.userId == request.auth.uid;
      }
    }

    // Tools collection
    match /tools/{toolId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;
    }

    // AI Tools collection
    match /ai-tools/{toolId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        (request.auth.token.admin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // For backward compatibility
    match /aiTools/{toolId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        (request.auth.token.admin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Likes collection (global)
    match /likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasOnly(['userId', 'postId', 'createdAt']);
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/likes/$(likeId)).data.userId == request.auth.uid;
    }

    // Video likes collection (if you use a separate collection)
    match /videoLikes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/videoLikes/$(likeId)).data.userId == request.auth.uid;
    }

    // Likes as a subcollection under videos
    match /videos/{videoId}/likes/{likeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/videos/$(videoId)/likes/$(likeId)).data.userId == request.auth.uid;
    }

    // Comments collection
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() &&
        get(/databases/$(database)/documents/comments/$(commentId)).data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['content', 'updatedAt']);
      allow delete: if isAuthenticated() &&
        get(/databases/$(database)/documents/comments/$(commentId)).data.userId == request.auth.uid;
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() &&
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.participants &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['lastMessage', 'updatedAt', 'serverTime']);
    }

    // Messages subcollection
    match /conversations/{conversationId}/messages/{messageId} {
      allow read: if isAuthenticated() &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.receiverId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }

    // Analytics views collection
    match /analytics_views/{viewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // Analytics interactions collection
    match /analytics_interactions/{interactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
    }

    // Analytics summary for portfolio items
    match /analytics_summary_portfolio/{itemId} {
      allow read: if isAuthenticated() &&
        exists(/databases/$(database)/documents/portfolio/$(itemId)) &&
        get(/databases/$(database)/documents/portfolio/$(itemId)).data.user_id == request.auth.uid;
      allow write: if isAuthenticated();
    }

    // Analytics summary for profiles
    match /analytics_summary_profile/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated();
    }
  }
}