rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true;  // Allow public read access to user profiles
      allow write: if isOwner(userId);
      // Allow updating Google Drive auth status and storing file URLs
      allow update: if isOwner(userId) && (
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['googleDriveAuth']) ||
        request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['portfolio', 'media_urls'])
      );

      // Allow querying users by username
      allow list: if true;

      // Nested collections under users
      match /{allChildren=**} {
        allow read: if true;  // Allow public read access to nested collections
        allow write: if isOwner(userId);
      }
    }

    // Portfolio items collection
    match /portfolio/{itemId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;
    }

    // Tools collection
    match /tools/{toolId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;
    }

    // AI Tools collection
    match /ai-tools/{toolId} {
      // Allow anyone to read AI tools
      allow read: if true;

      // Only allow admins to write to AI tools collection
      // This requires a custom claim 'admin' to be set for admin users
      allow write: if isAuthenticated() &&
        (request.auth.token.admin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // For backward compatibility
    match /aiTools/{toolId} {
      allow read: if true;
      allow write: if isAuthenticated() &&
        (request.auth.token.admin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    // Conversations collection
    match /conversations/{conversationId} {
      // Allow read if user is a participant
      allow read: if isAuthenticated() &&
        request.auth.uid in resource.data.participants;

      // Allow create if user is a participant
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;

      // Allow update if user is a participant and only updating message-related fields
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.participants &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['lastMessage', 'updatedAt', 'serverTime']);
    }

    // Messages subcollection
    match /conversations/{conversationId}/messages/{messageId} {
      // Allow read if user is a participant in the parent conversation
      allow read: if isAuthenticated() &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;

      // Allow create if user is the sender and a participant
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;

      // Allow update for marking messages as read if user is the receiver
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.receiverId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
  }
}